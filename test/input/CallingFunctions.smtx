main module calling {

    $print i$
    (i: int) {
        @printint(i);
        @printstring("\n");
    }

    @invokefun((arg: string){
        @printstring("Hello, ");
        @printstring(arg);
        @printstring("!\n");
    }, (arg: "Harry"));


    @decl(sum, func{record(x: int, y: int) -> int});
    @bind(sum, (x: int, y:int) -> int {
        @addint(x, y)
    });

    @printstring("Sum (1+2): ");
    print @invokefun(sum, (x: 1, y: 2));


    @decl(x, int);
    @bind(x, 0);

    @decl(incX, func{});
    @bind(incX, () {
        @bind(x, @addint(x, 1));
    });

    @decl(printX, func{});
    @bind(printX, {
        print x;
    });

    @printstring("x before inc: ");
    @invokefun(printX, ());
    @invokefun(incX, ());
    @printstring("x after inc: ");
    @invokefun(printX, ());


    @decl(add3, func{record(a: int) -> int});
    @bind(add3, (a: int) -> int {
        @decl(sum, int);
        @bind(sum, @addint(a, 3));
        @return(sum);
    });

    @printstring("Return (2+3): ");
    print @invokefun(add3, (a: 2));

    @decl(getCounter, func{ -> func{ -> int}});
    @bind(getCounter, () -> func{ -> int} {
        @decl(count, int);
        @bind(count, 0);

        @return(() -> int {
            @bind(count, @addint(count, 1));
            @return(count);
        });
    });

    @decl(counter1, func{ -> int});
    @bind(counter1, @invokefun(getCounter, ()));

    @printstring("counter1: ");
    print @invokefun(counter1, ());

    @decl(counter2, func{ -> int});
    @bind(counter2, @invokefun(getCounter, ()));

    @printstring("counter2: ");
    print @invokefun(counter2, ());

    @printstring("counter2: ");
    print @invokefun(counter2, ());

    @printstring("counter1: ");
    print @invokefun(counter1, ());
}